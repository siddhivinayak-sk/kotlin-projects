server:
  port: 9090
spring:
  application:
    name: gateway
  cloud:
    gateway:
      routes:
        - id: after_route
          uri: https://httpbin.org
          predicates:
            - Path=/get
          filters:
          #- StripPrefix=1
          - name: RequestRateLimiter
            args:
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 60
              redis-rate-limiter.requestedTokens: 60
              key-resolver: "#{@keyResolver1}"
          - name: RequestRateLimiter
            args:
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 60
              redis-rate-limiter.requestedTokens: 60
              key-resolver: "#{@keyResolver2}"
        - id: websocket-test-endpoint
          uri: http://localhost:8080
          predicates:
            - Path=/websocket-test-endpoint/api/**
            - QueryParam=Authorization
          filters:
            - RewritePath=/websocket-test-endpoint/api/(?<segment>.*), /websocket-test-endpoint/api/$\{segment}
            - AddRequestHeader=Authorization, {Authorization}
        - id: websocket-test
          uri: http://localhost:8080
          predicates:
            - Path=/websocket-test/resources/**
          filters:
            - RewritePath=/websocket-test/resources/(?<segment>.*), /websocket-test/resources/$\{segment}

management:
  health:
    redis:
      enabled: true
  endpoint:
    gateway:
      enabled:true
  endpoints:
    web:
      exposure:
        include: gateway

#debug: true
#logging:
#  level:
#    web: DEBUG

##      filter:
##        request-rate-limiter:
##          deny-empty-key: false  # no key resolver needed

# run redis
# docker run -d --name redis -p 6379:6379 redis